{
  "Custom Action": {
    "prefix": "rasa-action",
    "body": [
      "class Action${1:Name}(Action):",
      "    \"\"\"${2:Action description}\"\"\"",
      "",
      "    def name(self) -> Text:",
      "        return \"action_${3:name}\"",
      "",
      "    def run(",
      "        self,",
      "        dispatcher: CollectingDispatcher,",
      "        tracker: Tracker,",
      "        domain: Dict[Text, Any],",
      "    ) -> List[Dict[Text, Any]]:",
      "        ${4:# Your action code here}",
      "        $0",
      "        return []"
    ],
    "description": "Create a custom Rasa action"
  },
  "Action with Slot": {
    "prefix": "rasa-action-slot",
    "body": [
      "class Action${1:Name}(Action):",
      "    \"\"\"${2:Action description}\"\"\"",
      "",
      "    def name(self) -> Text:",
      "        return \"action_${3:name}\"",
      "",
      "    def run(",
      "        self,",
      "        dispatcher: CollectingDispatcher,",
      "        tracker: Tracker,",
      "        domain: Dict[Text, Any],",
      "    ) -> List[Dict[Text, Any]]:",
      "        # Get slot value",
      "        ${4:slot_name} = tracker.get_slot(\"${4:slot_name}\")",
      "        ",
      "        ${5:# Your action code here}",
      "        ",
      "        # Set slot",
      "        return [SlotSet(\"${6:result_slot}\", ${7:value})]",
      "        $0"
    ],
    "description": "Create a custom action that uses slots"
  },
  "Action with Utterance": {
    "prefix": "rasa-action-utter",
    "body": [
      "class Action${1:Name}(Action):",
      "    \"\"\"${2:Action description}\"\"\"",
      "",
      "    def name(self) -> Text:",
      "        return \"action_${3:name}\"",
      "",
      "    def run(",
      "        self,",
      "        dispatcher: CollectingDispatcher,",
      "        tracker: Tracker,",
      "        domain: Dict[Text, Any],",
      "    ) -> List[Dict[Text, Any]]:",
      "        ${4:# Your action code here}",
      "        ",
      "        dispatcher.utter_message(text=\"${5:Response message}\")",
      "        $0",
      "        return []"
    ],
    "description": "Create a custom action that sends a message"
  },
  "Action with API Call": {
    "prefix": "rasa-action-api",
    "body": [
      "class Action${1:Name}(Action):",
      "    \"\"\"${2:Action description}\"\"\"",
      "",
      "    def name(self) -> Text:",
      "        return \"action_${3:name}\"",
      "",
      "    async def run(",
      "        self,",
      "        dispatcher: CollectingDispatcher,",
      "        tracker: Tracker,",
      "        domain: Dict[Text, Any],",
      "    ) -> List[Dict[Text, Any]]:",
      "        # Get slot value",
      "        ${4:param} = tracker.get_slot(\"${4:param}\")",
      "        ",
      "        # Make API call",
      "        url = \"${5:https://api.example.com/endpoint}\"",
      "        async with aiohttp.ClientSession() as session:",
      "            async with session.get(url, params={\"${4:param}\": ${4:param}}) as response:",
      "                if response.status == 200:",
      "                    data = await response.json()",
      "                    ${6:# Process data}",
      "                    dispatcher.utter_message(text=f\"${7:Result: {data}}\")",
      "                else:",
      "                    dispatcher.utter_message(text=\"${8:Sorry, I couldn't fetch the data.}\")",
      "        $0",
      "        return []"
    ],
    "description": "Create a custom action with async API call"
  },
  "Action with Database": {
    "prefix": "rasa-action-db",
    "body": [
      "class Action${1:Name}(Action):",
      "    \"\"\"${2:Action description}\"\"\"",
      "",
      "    def name(self) -> Text:",
      "        return \"action_${3:name}\"",
      "",
      "    def run(",
      "        self,",
      "        dispatcher: CollectingDispatcher,",
      "        tracker: Tracker,",
      "        domain: Dict[Text, Any],",
      "    ) -> List[Dict[Text, Any]]:",
      "        # Get slot value",
      "        ${4:param} = tracker.get_slot(\"${4:param}\")",
      "        ",
      "        # Database query",
      "        try:",
      "            # Connect to database",
      "            ${5:# connection = db.connect()}",
      "            ${6:# result = connection.query(param)}",
      "            ",
      "            dispatcher.utter_message(text=f\"${7:Found: {result}}\")",
      "        except Exception as e:",
      "            logger.error(f\"Database error: {e}\")",
      "            dispatcher.utter_message(text=\"${8:Sorry, something went wrong.}\")",
      "        $0",
      "        return []"
    ],
    "description": "Create a custom action with database interaction"
  },
  "Custom Form Validation": {
    "prefix": "rasa-form-validation",
    "body": [
      "class Validate${1:FormName}(FormValidationAction):",
      "    \"\"\"${2:Form validation description}\"\"\"",
      "",
      "    def name(self) -> Text:",
      "        return \"validate_${3:form_name}\"",
      "",
      "    def validate_${4:slot_name}(",
      "        self,",
      "        slot_value: Any,",
      "        dispatcher: CollectingDispatcher,",
      "        tracker: Tracker,",
      "        domain: Dict[Text, Any],",
      "    ) -> Dict[Text, Any]:",
      "        \"\"\"Validate ${4:slot_name} value.\"\"\"",
      "        ",
      "        ${5:# Validation logic}",
      "        if ${6:slot_value is valid}:",
      "            return {\"${4:slot_name}\": slot_value}",
      "        else:",
      "            dispatcher.utter_message(text=\"${7:Invalid value, please try again.}\")",
      "            return {\"${4:slot_name}\": None}",
      "        $0"
    ],
    "description": "Create a custom form validation action"
  },
  "Knowledge Base Action": {
    "prefix": "rasa-action-knowledge",
    "body": [
      "class Action${1:Name}(Action):",
      "    \"\"\"${2:Knowledge base action description}\"\"\"",
      "",
      "    def name(self) -> Text:",
      "        return \"action_${3:name}\"",
      "",
      "    def run(",
      "        self,",
      "        dispatcher: CollectingDispatcher,",
      "        tracker: Tracker,",
      "        domain: Dict[Text, Any],",
      "    ) -> List[Dict[Text, Any]]:",
      "        # Extract entities",
      "        entities = tracker.latest_message.get(\"entities\", [])",
      "        ",
      "        ${4:# Knowledge base query logic}",
      "        ",
      "        if entities:",
      "            ${5:# Process entities and query knowledge base}",
      "            dispatcher.utter_message(text=f\"${6:Information about {entities}}\")",
      "        else:",
      "            dispatcher.utter_message(text=\"${7:What would you like to know?}\")",
      "        $0",
      "        return []"
    ],
    "description": "Create a knowledge base action"
  },
  "Action Imports": {
    "prefix": "rasa-imports",
    "body": [
      "from typing import Any, Text, Dict, List",
      "from rasa_sdk import Action, Tracker, FormValidationAction",
      "from rasa_sdk.executor import CollectingDispatcher",
      "from rasa_sdk.events import SlotSet, FollowupAction, AllSlotsReset",
      "import logging",
      "",
      "logger = logging.getLogger(__name__)",
      "$0"
    ],
    "description": "Import common Rasa SDK modules"
  },
  "Action with Events": {
    "prefix": "rasa-action-events",
    "body": [
      "class Action${1:Name}(Action):",
      "    \"\"\"${2:Action description}\"\"\"",
      "",
      "    def name(self) -> Text:",
      "        return \"action_${3:name}\"",
      "",
      "    def run(",
      "        self,",
      "        dispatcher: CollectingDispatcher,",
      "        tracker: Tracker,",
      "        domain: Dict[Text, Any],",
      "    ) -> List[Dict[Text, Any]]:",
      "        ${4:# Your action code here}",
      "        ",
      "        return [",
      "            SlotSet(\"${5:slot_name}\", ${6:value}),",
      "            ${7|FollowupAction(\"action_name\"),AllSlotsReset()|}",
      "        ]",
      "        $0"
    ],
    "description": "Create an action that returns multiple events"
  },
  "Action with Logger": {
    "prefix": "rasa-action-log",
    "body": [
      "class Action${1:Name}(Action):",
      "    \"\"\"${2:Action description}\"\"\"",
      "",
      "    def name(self) -> Text:",
      "        return \"action_${3:name}\"",
      "",
      "    def run(",
      "        self,",
      "        dispatcher: CollectingDispatcher,",
      "        tracker: Tracker,",
      "        domain: Dict[Text, Any],",
      "    ) -> List[Dict[Text, Any]]:",
      "        logger.info(f\"Running action: {self.name()}\")",
      "        logger.debug(f\"Tracker state: {tracker.current_state()}\")",
      "        ",
      "        ${4:# Your action code here}",
      "        ",
      "        logger.info(\"Action completed successfully\")",
      "        $0",
      "        return []"
    ],
    "description": "Create an action with logging"
  },
  "Test Story": {
    "prefix": "rasa-test-story",
    "body": [
      "- story: ${1:test_story_name}",
      "  steps:",
      "    - user: |",
      "        ${2:user message}",
      "      intent: ${3:intent_name}",
      "    - action: ${4:action_name}",
      "    - action: ${5:utter_response}",
      "    - slot_was_set:",
      "        - ${6:slot_name}: ${7:expected_value}",
      "    $0"
    ],
    "description": "Create a test story"
  }
}
